{"version":3,"file":"src_app_login_login_module_ts.js","mappings":"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","sources":["./src/app/login/login-routing.module.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/login/login.module.ts","./node_modules/@angular/material/fesm2020/checkbox.mjs"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { LoginComponent } from './login.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: LoginComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class LoginRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n    constructor(private router: Router) { }\r\n\r\n    ngOnInit() { }\r\n\r\n    onLogin() {\r\n        console.log(localStorage);\r\n        // debugger;\r\n        localStorage.setItem('isLoggedin', 'true');\r\n        console.log(localStorage);\r\n        this.router.navigate(['/dashboard']);\r\n    }\r\n}\r\n","<div class=\"login-page\">\r\n    <div class=\"content\">\r\n        <!-- <h1 class=\"app-name\">Sb Admin Material</h1> -->\r\n        <form class=\"login-form\" fxFlex  >\r\n            <div class=\"text-center\">\r\n                <img src=\"/assets/images/bifrost.png\" style=\"width: 410px;height:180px;\">\r\n                <!-- <h2 class=\"app-name\">Bifrost</h2> -->\r\n            </div>\r\n            <div fxFlex  fxlayout=\"row\" fxlayout.lt-md=\"column\">\r\n                <div fxFlexFill>\r\n                    <mat-form-field class=\"w-100\">\r\n                        <input matInput placeholder=\"Email\">\r\n                    </mat-form-field>\r\n                </div>\r\n            </div>\r\n            <div fxFlex  fxLayout=\"row\" fxLayout.lt-md=\"column\">\r\n                <div fxFlexFill>\r\n                    <mat-form-field class=\"w-100\">\r\n                        <input matInput type=\"password\" placeholder=\"Password\">\r\n                    </mat-form-field>\r\n                </div>\r\n            </div>\r\n            <div fxFlex  fxLayout=\"row\" fxLayout.lt-md=\"column\" style=\"margin: 20px 0 30px 0\">\r\n                <div fxFlex>\r\n                    <mat-checkbox>Remember Me</mat-checkbox>\r\n                </div>\r\n                <div fxFlex  fxLayoutAlign=\"end\">\r\n                    <a href=\"javascript:void(0)\" style=\"color:#de4c49\">Forget Password</a>\r\n                </div>\r\n            </div>\r\n            <div fxFlex  fxLayout=\"row\" fxLayout.lt-md=\"column\">\r\n                <div fxFlexFill>\r\n                    <button mat-raised-button style=\"background-color:#de4c49;color:#fff;\" class=\"w-100\" (click)=\"onLogin()\">Login</button>\r\n                </div>\r\n            </div>\r\n\r\n        </form>\r\n    </div>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatInputModule } from '@angular/material/input';\r\n\r\nimport { LoginRoutingModule } from './login-routing.module';\r\nimport { LoginComponent } from './login.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        LoginRoutingModule,\r\n        MatInputModule,\r\n        MatCheckboxModule,\r\n        MatButtonModule,\r\n        FlexLayoutModule.withConfig({addFlexToParent: false})\r\n    ],\r\n    declarations: [LoginComponent]\r\n})\r\nexport class LoginModule {}\r\n","import * as i1 from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, Input, Output, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Optional, Inject, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport * as i2 from '@angular/material/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i3 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-checkbox`. */\nconst MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken('mat-checkbox-default-options', {\n    providedIn: 'root',\n    factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent',\n        clickAction: 'check-indeterminate',\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n// Default checkbox configuration.\nconst defaults = MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY();\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatCheckbox),\n    multi: true,\n};\n/** Change event object emitted by MatCheckbox. */\nclass MatCheckboxChange {\n}\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nconst _MatCheckboxMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}))));\nclass _MatCheckboxBase extends _MatCheckboxMixinBase {\n    constructor(idPrefix, elementRef, _changeDetectorRef, _ngZone, tabIndex, _animationMode, _options) {\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._animationMode = _animationMode;\n        this._options = _options;\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n         * take precedence so this may be omitted.\n         */\n        this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n        this.labelPosition = 'after';\n        /** Name value will be applied to the input element if present */\n        this.name = null;\n        /** Event emitted when the checkbox's `checked` value changes. */\n        this.change = new EventEmitter();\n        /** Event emitted when the checkbox's `indeterminate` value changes. */\n        this.indeterminateChange = new EventEmitter();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * @docs-private\n         */\n        this._onTouched = () => { };\n        this._currentAnimationClass = '';\n        this._currentCheckState = 0 /* TransitionCheckState.Init */;\n        this._controlValueAccessorChangeFn = () => { };\n        this._checked = false;\n        this._disabled = false;\n        this._indeterminate = false;\n        this._options = this._options || defaults;\n        this.color = this.defaultColor = this._options.color || defaults.color;\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this.id = this._uniqueId = `${idPrefix}${++nextUniqueId}`;\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() {\n        return `${this.id || this._uniqueId}-input`;\n    }\n    /** Whether the checkbox is required. */\n    get required() {\n        return this._required;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        this._syncIndeterminate(this._indeterminate);\n    }\n    /** Whether the checkbox is checked. */\n    get checked() {\n        return this._checked;\n    }\n    set checked(value) {\n        const checked = coerceBooleanProperty(value);\n        if (checked != this.checked) {\n            this._checked = checked;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this.disabled) {\n            this._disabled = newValue;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    get indeterminate() {\n        return this._indeterminate;\n    }\n    set indeterminate(value) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = coerceBooleanProperty(value);\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(3 /* TransitionCheckState.Indeterminate */);\n            }\n            else {\n                this._transitionCheckState(this.checked ? 1 /* TransitionCheckState.Checked */ : 2 /* TransitionCheckState.Unchecked */);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n        this._syncIndeterminate(this._indeterminate);\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n        // component will be only marked for check, but no actual change detection runs automatically.\n        // Instead of going back into the zone in order to trigger a change detection which causes\n        // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n        // an explicit change detection for the checkbox view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    _getAriaChecked() {\n        if (this.checked) {\n            return 'true';\n        }\n        return this.indeterminate ? 'mixed' : 'false';\n    }\n    _transitionCheckState(newState) {\n        let oldState = this._currentCheckState;\n        let element = this._getAnimationTargetElement();\n        if (oldState === newState || !element) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n            // Remove the animation class to avoid animation when the checkbox is moved between containers\n            const animationClass = this._currentAnimationClass;\n            this._ngZone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    element.classList.remove(animationClass);\n                }, 1000);\n            });\n        }\n    }\n    _emitChangeEvent() {\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(this._createChangeEvent(this.checked));\n        // Assigning the value again here is redundant, but we have to do it in case it was\n        // changed inside the `change` listener which will cause the input to be out of sync.\n        if (this._inputElement) {\n            this._inputElement.nativeElement.checked = this.checked;\n        }\n    }\n    /** Toggles the `checked` state of the checkbox. */\n    toggle() {\n        this.checked = !this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n    }\n    _handleInputClick() {\n        const clickAction = this._options?.clickAction;\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && clickAction !== 'check') {\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n            this._checked = !this._checked;\n            this._transitionCheckState(this._checked ? 1 /* TransitionCheckState.Checked */ : 2 /* TransitionCheckState.Unchecked */);\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n        else if (!this.disabled && clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mat-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n    _onInteractionEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    _onBlur() {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    _getAnimationClassForCheckStateTransition(oldState, newState) {\n        // Don't transition if animations are disabled.\n        if (this._animationMode === 'NoopAnimations') {\n            return '';\n        }\n        switch (oldState) {\n            case 0 /* TransitionCheckState.Init */:\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                // [checked] bound to it.\n                if (newState === 1 /* TransitionCheckState.Checked */) {\n                    return this._animationClasses.uncheckedToChecked;\n                }\n                else if (newState == 3 /* TransitionCheckState.Indeterminate */) {\n                    return this._animationClasses.uncheckedToIndeterminate;\n                }\n                break;\n            case 2 /* TransitionCheckState.Unchecked */:\n                return newState === 1 /* TransitionCheckState.Checked */\n                    ? this._animationClasses.uncheckedToChecked\n                    : this._animationClasses.uncheckedToIndeterminate;\n            case 1 /* TransitionCheckState.Checked */:\n                return newState === 2 /* TransitionCheckState.Unchecked */\n                    ? this._animationClasses.checkedToUnchecked\n                    : this._animationClasses.checkedToIndeterminate;\n            case 3 /* TransitionCheckState.Indeterminate */:\n                return newState === 1 /* TransitionCheckState.Checked */\n                    ? this._animationClasses.indeterminateToChecked\n                    : this._animationClasses.indeterminateToUnchecked;\n        }\n        return '';\n    }\n    /**\n     * Syncs the indeterminate value with the checkbox DOM node.\n     *\n     * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n     * property is supported on an element boils down to `if (propName in element)`. Domino's\n     * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n     * server-side rendering.\n     */\n    _syncIndeterminate(value) {\n        const nativeCheckbox = this._inputElement;\n        if (nativeCheckbox) {\n            nativeCheckbox.nativeElement.indeterminate = value;\n        }\n    }\n}\n_MatCheckboxBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: _MatCheckboxBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatCheckboxBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: _MatCheckboxBase, inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], id: \"id\", required: \"required\", labelPosition: \"labelPosition\", name: \"name\", value: \"value\", checked: \"checked\", disabled: \"disabled\", indeterminate: \"indeterminate\" }, outputs: { change: \"change\", indeterminateChange: \"indeterminateChange\" }, viewQueries: [{ propertyName: \"_inputElement\", first: true, predicate: [\"input\"], descendants: true }, { propertyName: \"ripple\", first: true, predicate: MatRipple, descendants: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: _MatCheckboxBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: undefined }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined }, { type: undefined }, { type: undefined }]; }, propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], id: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], labelPosition: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }], indeterminateChange: [{\n                type: Output\n            }], value: [{\n                type: Input\n            }], _inputElement: [{\n                type: ViewChild,\n                args: ['input']\n            }], ripple: [{\n                type: ViewChild,\n                args: [MatRipple]\n            }], checked: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], indeterminate: [{\n                type: Input\n            }] } });\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nclass MatCheckbox extends _MatCheckboxBase {\n    constructor(elementRef, changeDetectorRef, _focusMonitor, ngZone, tabIndex, animationMode, options) {\n        super('mat-checkbox-', elementRef, changeDetectorRef, ngZone, tabIndex, animationMode, options);\n        this._focusMonitor = _focusMonitor;\n        this._animationClasses = {\n            uncheckedToChecked: 'mat-checkbox-anim-unchecked-checked',\n            uncheckedToIndeterminate: 'mat-checkbox-anim-unchecked-indeterminate',\n            checkedToUnchecked: 'mat-checkbox-anim-checked-unchecked',\n            checkedToIndeterminate: 'mat-checkbox-anim-checked-indeterminate',\n            indeterminateToChecked: 'mat-checkbox-anim-indeterminate-checked',\n            indeterminateToUnchecked: 'mat-checkbox-anim-indeterminate-unchecked',\n        };\n    }\n    _createChangeEvent(isChecked) {\n        const event = new MatCheckboxChange();\n        event.source = this;\n        event.checked = isChecked;\n        return event;\n    }\n    _getAnimationTargetElement() {\n        return this._elementRef.nativeElement;\n    }\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n            if (!focusOrigin) {\n                this._onBlur();\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n        super._handleInputClick();\n    }\n    /** Focuses the checkbox. */\n    focus(origin, options) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n}\nMatCheckbox.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatCheckbox, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.FocusMonitor }, { token: i0.NgZone }, { token: 'tabindex', attribute: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_CHECKBOX_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatCheckbox.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.1\", type: MatCheckbox, selector: \"mat-checkbox\", inputs: { disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\" }, host: { properties: { \"id\": \"id\", \"attr.tabindex\": \"null\", \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"class.mat-checkbox-indeterminate\": \"indeterminate\", \"class.mat-checkbox-checked\": \"checked\", \"class.mat-checkbox-disabled\": \"disabled\", \"class.mat-checkbox-label-before\": \"labelPosition == \\\"before\\\"\", \"class._mat-animation-noopable\": \"_animationMode === 'NoopAnimations'\" }, classAttribute: \"mat-checkbox\" }, providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR], exportAs: [\"matCheckbox\"], usesInheritance: true, ngImport: i0, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <span class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <span matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: _animationMode === 'NoopAnimations' ? 0 : 150}\\\">\\n      <span class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></span>\\n    </span>\\n    <span class=\\\"mat-checkbox-frame\\\"></span>\\n    <span class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           aria-hidden=\\\"true\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <span class=\\\"mat-checkbox-mixedmark\\\"></span>\\n    </span>\\n  </span>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-checkbox._mat-animation-noopable{transition:none !important;animation:none !important}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-ripple{outline:solid 3px}.mat-checkbox-layout{-webkit-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:rgba(0,0,0,0);transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:rgba(0,0,0,0)}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}\"], dependencies: [{ kind: \"directive\", type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }, { kind: \"directive\", type: i3.CdkObserveContent, selector: \"[cdkObserveContent]\", inputs: [\"cdkObserveContentDisabled\", \"debounce\"], outputs: [\"cdkObserveContent\"], exportAs: [\"cdkObserveContent\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatCheckbox, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-checkbox', exportAs: 'matCheckbox', host: {\n                        'class': 'mat-checkbox',\n                        '[id]': 'id',\n                        '[attr.tabindex]': 'null',\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[class.mat-checkbox-indeterminate]': 'indeterminate',\n                        '[class.mat-checkbox-checked]': 'checked',\n                        '[class.mat-checkbox-disabled]': 'disabled',\n                        '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n                        '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n                    }, providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR], inputs: ['disableRipple', 'color', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <span class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <span matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: _animationMode === 'NoopAnimations' ? 0 : 150}\\\">\\n      <span class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></span>\\n    </span>\\n    <span class=\\\"mat-checkbox-frame\\\"></span>\\n    <span class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           aria-hidden=\\\"true\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <span class=\\\"mat-checkbox-mixedmark\\\"></span>\\n    </span>\\n  </span>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-checkbox._mat-animation-noopable{transition:none !important;animation:none !important}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-ripple{outline:solid 3px}.mat-checkbox-layout{-webkit-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:rgba(0,0,0,0);transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:rgba(0,0,0,0)}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_CHECKBOX_DEFAULT_OPTIONS]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n    multi: true,\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\nMatCheckboxRequiredValidator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatCheckboxRequiredValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatCheckboxRequiredValidator.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: MatCheckboxRequiredValidator, selector: \"mat-checkbox[required][formControlName],\\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]\", providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatCheckboxRequiredValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n                    providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based checkbox implementations. */\nclass _MatCheckboxRequiredValidatorModule {\n}\n_MatCheckboxRequiredValidatorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n_MatCheckboxRequiredValidatorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.1\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule, declarations: [MatCheckboxRequiredValidator], exports: [MatCheckboxRequiredValidator] });\n_MatCheckboxRequiredValidatorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [MatCheckboxRequiredValidator],\n                    declarations: [MatCheckboxRequiredValidator],\n                }]\n        }] });\nclass MatCheckboxModule {\n}\nMatCheckboxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatCheckboxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.1\", ngImport: i0, type: MatCheckboxModule, declarations: [MatCheckbox], imports: [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule], exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule] });\nMatCheckboxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatCheckboxModule, imports: [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule, MatCommonModule, _MatCheckboxRequiredValidatorModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatCheckboxModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule],\n                    exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n                    declarations: [MatCheckbox],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, MAT_CHECKBOX_DEFAULT_OPTIONS, MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckbox, MatCheckboxChange, MatCheckboxModule, MatCheckboxRequiredValidator, _MatCheckboxBase, _MatCheckboxRequiredValidatorModule };\n"],"names":["i1","coerceBooleanProperty","i0","InjectionToken","forwardRef","EventEmitter","Directive","Input","Output","ViewChild","Component","ViewEncapsulation","ChangeDetectionStrategy","Attribute","Optional","Inject","NgModule","NG_VALUE_ACCESSOR","NG_VALIDATORS","CheckboxRequiredValidator","i2","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","MatRipple","MatRippleModule","MatCommonModule","ANIMATION_MODULE_TYPE","i3","ObserversModule","MAT_CHECKBOX_DEFAULT_OPTIONS","providedIn","factory","MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY","color","clickAction","nextUniqueId","defaults","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatCheckbox","multi","MatCheckboxChange","_MatCheckboxMixinBase","constructor","_elementRef","_MatCheckboxBase","idPrefix","elementRef","_changeDetectorRef","_ngZone","tabIndex","_animationMode","_options","ariaLabel","ariaLabelledby","labelPosition","name","change","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","_controlValueAccessorChangeFn","_checked","_disabled","_indeterminate","defaultColor","parseInt","id","_uniqueId","inputId","required","_required","value","ngAfterViewInit","_syncIndeterminate","checked","markForCheck","disabled","newValue","indeterminate","changed","_transitionCheckState","emit","_isRippleDisabled","disableRipple","_onLabelTextChange","detectChanges","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_getAriaChecked","newState","oldState","element","_getAnimationTargetElement","length","classList","remove","_getAnimationClassForCheckStateTransition","add","animationClass","runOutsideAngular","setTimeout","_emitChangeEvent","_createChangeEvent","_inputElement","nativeElement","toggle","_handleInputClick","Promise","resolve","then","_onInteractionEvent","event","stopPropagation","_onBlur","_animationClasses","uncheckedToChecked","uncheckedToIndeterminate","checkedToUnchecked","checkedToIndeterminate","indeterminateToChecked","indeterminateToUnchecked","nativeCheckbox","ɵfac","ɵdir","type","undefined","ElementRef","ChangeDetectorRef","NgZone","args","ariaDescribedby","ripple","changeDetectorRef","_focusMonitor","ngZone","animationMode","options","isChecked","source","monitor","subscribe","focusOrigin","ngOnDestroy","stopMonitoring","_onInputClick","focus","origin","focusVia","FocusMonitor","ɵcmp","CdkObserveContent","selector","exportAs","host","providers","inputs","encapsulation","None","changeDetection","OnPush","template","styles","decorators","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","_MatCheckboxRequiredValidatorModule","ɵmod","ɵinj","exports","declarations","MatCheckboxModule","imports"],"sourceRoot":"webpack:///"}